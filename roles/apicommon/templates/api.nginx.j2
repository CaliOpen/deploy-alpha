upstream uwsgi_apiv1 {
  least_conn;
  {% for host in groups['api'] %}
  server {{ hostvars[host]['backend_ip'] }}:3001;
  {% endfor %}
}

upstream apiv2 {
  least_conn;
  {% for host in groups['api'] %}
  server {{ hostvars[host]['backend_ip'] }}:6544;
  {% endfor %}
}

server {
    listen    443 ssl;
    listen    [::]:443 ssl;
    server_name api.{{ caliopen_domain_name }};

    client_max_body_size 5m;

    ssl_certificate     /etc/nginx/certs/{{ caliopen_domain_name }}.crt;
    ssl_certificate_key /etc/nginx/certs/{{ caliopen_domain_name }}.key;
    ssl_prefer_server_ciphers On;
    ssl_protocols TLSv1.1 TLSv1.2;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS;
    ssl_session_cache builtin:1000 shared:SSL:10m;

    location /api/v1 {
            include uwsgi_params;
            uwsgi_pass uwsgi_apiv1;
    }

    location /api/v2 {
            proxy_pass  http://apiv2;
    }
}

server {
    listen {{ facter_ipaddress_eth1 }}:80;
    allow {{ facter_network_eth1 }}/24;

    server_name {{ ansible_hostname }}.{{ caliopen_domain_name }};
    
    # rewrite     ^(.*)   https://$server_name$1 permanent;

    # XXX temporary situation until client use https
    location /api/v1 {
            include uwsgi_params;
            uwsgi_pass uwsgi_apiv1;
    }

    location /api/v2 {
            proxy_pass  http://apiv2;
    }
}


server {
  listen {{ facter_ipaddress_eth1 }}:9145;
  allow {{ facter_network_eth1 }}/24;
  deny all;
  location /metrics {
    content_by_lua '
      metric_connections:set(ngx.var.connections_reading, {"reading"})
      metric_connections:set(ngx.var.connections_waiting, {"waiting"})
      metric_connections:set(ngx.var.connections_writing, {"writing"})
      prometheus:collect()
    ';
  }
}
